name: Build and Publish to NPM
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build on ${{ matrix.os }} for Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build
      - run: npm test
      - name: Get platform info
        id: platform
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "platform=win32" >> $GITHUB_OUTPUT
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "platform=darwin" >> $GITHUB_OUTPUT
          else
            echo "platform=linux" >> $GITHUB_OUTPUT
          fi
          echo "arch=$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Get Node ABI
        id: node-abi
        shell: bash
        run: echo "abi=v$(node -p "process.versions.modules")" >> $GITHUB_OUTPUT
      - name: List build artifacts
        run: ls -R ./lib
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: node-zipper-${{ matrix.os }}-node${{ matrix.node-version }}
          path: ./lib/binding/Release/node-${{ steps.node-abi.outputs.abi }}-${{ steps.platform.outputs.platform }}-${{ steps.platform.outputs.arch }}/node-zipper.node
          if-no-files-found: error
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./temp_artifacts
      - name: Prepare binaries
        run: |
          mkdir -p ./lib/binding/Release
          find ./temp_artifacts -type f -name 'node-zipper.node' | while read file; do
            dir=$(dirname "$file")
            target_dir="./lib/binding/Release/$(basename "$dir")"
            mkdir -p "$target_dir"
            cp "$file" "$target_dir/"
          done
          rm -rf ./temp_artifacts
      - name: List prepared binaries
        run: ls -R ./lib/binding
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
